From: Andreas Olofsson <ao@blazar.se>
Date: Sun, 13 Sep 2020 19:27:40
Subject: [PATCH] Adds a message drawn using XFT.

---
diff --git a/config.def.h b/config.def.h
index 9855e21..1251adf 100644
--- a/config.def.h
+++ b/config.def.h
@@ -10,3 +10,15 @@ static const char *colorname[NUMCOLS] = {
 
 /* treat a cleared input like a wrong password (color) */
 static const int failonclear = 1;
+
+/* default message */
+static const char * message = "Suckless: Software that sucks less.";
+
+/* text color */
+static const char * text_color = "#ffffff";
+
+/* text font */
+static const char * font_name = "Noto Sans";
+
+/* text size */
+static double font_size = 12.0;
diff --git a/config.mk b/config.mk
index 74429ae..74a3710 100644
--- a/config.mk
+++ b/config.mk
@@ -11,8 +11,8 @@ X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib
 
 # includes and libs
-INCS = -I. -I/usr/include -I${X11INC}
-LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 -lXext -lXrandr
+INCS = -I. -I/usr/include -I${X11INC} -I/usr/include/freetype2
+LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 -lXext -lXrandr -lXft
 
 # flags
 CPPFLAGS = -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_SHADOW_H
diff --git a/slock.1 b/slock.1
index 82cdcd6..541a264 100644
--- a/slock.1
+++ b/slock.1
@@ -6,6 +6,7 @@
 .Sh SYNOPSIS
 .Nm
 .Op Fl v
+.Op Fl m Ar message
 .Op Ar cmd Op Ar arg ...
 .Sh DESCRIPTION
 .Nm
@@ -16,6 +17,9 @@ is executed after the screen has been locked.
 .Bl -tag -width Ds
 .It Fl v
 Print version information to stdout and exit.
+.It Fl m Ar message
+Overrides default slock lock message.
+.TP
 .El
 .Sh SECURITY CONSIDERATIONS
 To make sure a locked screen can not be bypassed by switching VTs
diff --git a/slock.c b/slock.c
index 5ae738c..1e19d4b 100644
--- a/slock.c
+++ b/slock.c
@@ -15,6 +15,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <X11/extensions/Xrandr.h>
+#include <X11/Xft/Xft.h>
 #include <X11/keysym.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
@@ -24,6 +25,9 @@
 
 char *argv0;
 
+/* global count to prevent repeated error messages */
+int count_error = 0;
+
 enum {
 	INIT,
 	INPUT,
@@ -83,6 +87,78 @@ dontkillme(void)
 }
 #endif
 
+static void
+writemessage(Display *dpy, Window win, int screen)
+{
+    int i, j, k;
+    int len;
+    int line_len;
+    int s_width, s_height;
+    int x, y;
+    XftDraw* xftdraw;
+    XftFont* font;
+    XftColor xftcolor;
+    XGlyphInfo extents;
+
+    xftdraw = XftDrawCreate(dpy, win,
+                            DefaultVisual(dpy, screen),
+                            DefaultColormap(dpy, screen));
+    font = XftFontOpen(dpy, screen,
+                       XFT_FAMILY, XftTypeString, font_name,
+                       XFT_SIZE, XftTypeDouble, font_size,
+                       NULL);
+
+    if (!font) {
+        fprintf(stderr, "slock: unable to find font\n");
+        return;
+    }
+
+    XftColorAllocName(dpy, DefaultVisual(dpy, screen), DefaultColormap(dpy, screen), text_color, &xftcolor);
+
+    len = strlen(message);
+    
+    line_len = 0;
+
+    k = 0;
+    for (i = j = 0; i <= len; i++) {
+        if (i == len || message[i] == '\n') {
+            XftTextExtentsUtf8(dpy, font, (const FcChar8*) message, i - j, &extents);
+
+            if (extents.width > line_len) {
+                line_len = extents.width;
+            }
+
+            while (i < len && message[i] == '\n') {
+                i++;
+                j = i;
+                k++;
+            }
+        }
+    }
+
+    s_width = DisplayWidth(dpy, screen);
+    s_height = DisplayHeight(dpy, screen);
+
+    x = (s_width - line_len) / 2;
+    y = (s_height - (k-1) * font->ascent) / 2;
+
+    for (i = j = k = 0; i <= len; i++) {
+        if (i == len || message[i] == '\n') {
+            XftDrawStringUtf8(xftdraw, &xftcolor, font, x, y + k * font->ascent, (const FcChar8*) message + j, i - j);
+
+            while (i < len && message[i] == '\n') {
+                i++;
+                j = i;
+                k++;
+            }
+        }
+    }
+
+    XftColorFree(dpy, DefaultVisual(dpy, 0), DefaultColormap(dpy, 0), &xftcolor);
+    XftFontClose(dpy, font);
+    XftDrawDestroy(xftdraw);
+}
+
 static const char *
 gethash(void)
 {
@@ -194,6 +271,7 @@ readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
 					                     locks[screen]->win,
 					                     locks[screen]->colors[color]);
 					XClearWindow(dpy, locks[screen]->win);
+					writemessage(dpy, locks[screen]->win, screen);
 				}
 				oldc = color;
 			}
@@ -300,7 +378,7 @@ lockscreen(Display *dpy, struct xrandr *rr, int screen)
 static void
 usage(void)
 {
-	die("usage: slock [-v] [cmd [arg ...]]\n");
+	die("usage: slock [-v] [-m message] [cmd [arg ...]]\n");
 }
 
 int
@@ -319,6 +397,9 @@ main(int argc, char **argv) {
 	case 'v':
 		fprintf(stderr, "slock-"VERSION"\n");
 		return 0;
+	case 'm':
+		message = EARGF(usage());
+		break;
 	default:
 		usage();
 	} ARGEND
@@ -363,10 +444,12 @@ main(int argc, char **argv) {
 	if (!(locks = calloc(nscreens, sizeof(struct lock *))))
 		die("slock: out of memory\n");
 	for (nlocks = 0, s = 0; s < nscreens; s++) {
-		if ((locks[s] = lockscreen(dpy, &rr, s)) != NULL)
+		if ((locks[s] = lockscreen(dpy, &rr, s)) != NULL) {
+            writemessage(dpy, locks[s]->win, s);
 			nlocks++;
-		else
+		} else {
 			break;
+        }
 	}
 	XSync(dpy, 0);
 
